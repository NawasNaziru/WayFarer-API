{"version":3,"sources":["app.js"],"names":["require","load","express","path","logger","cookieParser","bodyParser","routesApi","app","global","Users","token","id","firstName","lastName","email","type","isAdmin","password","Accounts","accountNumber","openingBalance","createdOn","owner","status","balance","nextAccount","Transactions","staffIds","adminIds","use","json","urlencoded","extended","static","join","__dirname","req","res","sendFile","next","err","Error","name","message","get","render","error","module","exports"],"mappings":"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","file":"app.js","sourceRoot":"C:/Users/owner/Banka","sourcesContent":["require('dotenv').load();\nconst express = require('express');\nconst path = require('path');\nconst logger = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\n\nrequire('./app_api/config/passport');\n\nconst routesApi = require('./app_api/routes/index');\n\nconst app = express();\n\n/* Below are Non-persistent data structures of choice.\nSome of them are prefilled with some data for mocha and chai http test.\nThis is because chai always restart the node server for each request.\nHence, the need for some test data, independent of previous request. */\n\nglobal.Users = {\n  'nawasnaziru@gmail.com': {\n    token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjAsImVtYWlsIjoibmF3YXNuYXppcnVAZ21haWwuY29tIiwibmFtZSI6Im5hd2FzIiwiZXhwIjoxNTU1NDE1MjQ1LCJpYXQiOjE1NTQ4MTA0NDV9.2QscsXy8fuPXnO59OIml78T7O6rBhuXmk2H-yBmLzW8',\n    id: 0,\n    firstName: 'nawas',\n    lastName: 'adam',\n    email: 'nawasnaziru@gmail.com',\n    type: 'client',\n    isAdmin: false,\n    password: '123456a',\n  },\n  'linustorvalds@linux.com': {\n    token: 'fyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOjAsImVtYWlsIjoibmF3YXNuYXppcnVAZ21haWwuY29tIiwibmFtZSI6Im5hd2FzIiwiZXhwIjoxNTU1NDE1MjQ1LCJpYXQiOjE1NTQ4MTA0NDV9.2QscsXy8fuPXnO59OIml78T7O6rBhuXmk2H-yBmLzW8',\n    id: 316,\n    firstName: 'linus',\n    lastName: 'torvalds',\n    email: 'linustorvalds@linux.com',\n    type: 'staff',\n    isAdmin: true,\n    password: '123456b',\n  },\n};\n\n// global.Users = {};\n\nglobal.Accounts = {\n  accountNumber: {\n    accountNumber: 2000000000,\n    firstName: 'nawas',\n    lastName: 'adam',\n    email: 'nawasnaziru@gmail.com',\n    type: 'savings',\n    openingBalance: 0,\n    createdOn: '2019-04-11T09:10:33.000Z',\n    owner: 0,\n    status: 'active',\n    balance: 0,\n    id: 0,\n  },\n};\n\nglobal.nextAccount = 2000000000;\nglobal.Transactions = {};\n\nglobal.staffIds = [104, 189, 316, 427, 518];\nglobal.adminIds = [411, 581, 611, 723, 851];\n\n// uncomment after placing your favicon in /public\n// app.use(favicon(__dirname + '/UI/favicon.ico'));\n\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use(express.static(path.join(__dirname, 'UI')));\n\napp.use('/api', routesApi);\n\napp.use((req, res) => {\n  res.sendFile(path.join(__dirname, 'UI', 'index.html'));\n});\n\n// catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n// Catch unauthorised errors\napp.use((err, req, res) => {\n  if (err.name === 'UnauthorizedError') {\n    res.status(401);\n    res.json({ message: `${err.name}: ${err.message}` });\n  }\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n  app.use((err, req, res) => {\n    res.status(err.status || 500);\n    res.render('error', {\n      message: err.message,\n      error: err,\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use((err, req, res) => {\n  res.status(err.status || 500);\n  res.render('error', {\n    message: err.message,\n    error: {},\n  });\n});\n\n\nmodule.exports = app;\n"]}