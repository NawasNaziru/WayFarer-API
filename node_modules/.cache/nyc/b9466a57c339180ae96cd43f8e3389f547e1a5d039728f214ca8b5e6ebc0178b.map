{"version":3,"sources":["transactions.js"],"names":["sendJSONresponse","res","status","content","json","timeStamp","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","hasId","arr","id","i","length","module","exports","debit","req","params","accountNumber","error","body","amount","email","Accounts","Users","staffIds","parseInt","transaction","transactionId","Object","keys","Transactions","parseFloat","cashier","createdOn","transactionType","accountBalance","balance","oldBalance","newBalance","data","credit"],"mappings":"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","file":"transactions.js","sourceRoot":"C:/Users/owner/Banka/app_api/controllers","sourcesContent":["/* eslint-disable func-names */\n/* eslint-disable no-undef */\n/* eslint-disable no-useless-concat */\n\n\nconst sendJSONresponse = function (res, status, content) {\n  res.status(status);\n  res.json(content);\n};\n\nfunction timeStamp() {\n  return `${(new Date()).getFullYear()}-${(new Date()).getMonth() + 1}-${(new Date()).getDate()}  ${(new Date()).getHours()}:${(new Date()).getMinutes()}:${(new Date()).getSeconds()}`;\n}\n\nconst hasId = function (arr, id) {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] === id) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// eslint-disable-next-line func-names\nmodule.exports.debit = function (req, res) {\n  if (!req.params.accountNumber) {\n    sendJSONresponse(res, 400, {\n      status: 400,\n      error: 'You have not specified the account number in the params!',\n    });\n    return;\n  }\n\n  if (!req.body.amount) {\n    sendJSONresponse(res, 400, {\n      status: 400,\n      error: 'You have not specified the amount!',\n    });\n    return;\n  }\n\n  if (!req.body.email) {\n    sendJSONresponse(res, 400, {\n      status: 400,\n      error: 'You have not specified your email!',\n    });\n    return;\n  }\n\n\n  // eslint-disable-next-line no-undef\n  if (!Accounts[req.params.accountNumber]) {\n    sendJSONresponse(res, 404, {\n      status: 404,\n      error: \"Account number doesn't exist in the first place!\",\n    });\n    return;\n  }\n\n  // eslint-disable-next-line no-undef\n  if (!Users[req.body.email]) {\n    sendJSONresponse(res, 404, {\n      status: 404,\n      error: 'You have not signed up!',\n    });\n    return;\n  }\n\n  // eslint-disable-next-line no-undef\n  if (!(hasId(staffIds, parseInt(Users[req.body.email].id, 10)))) {\n    sendJSONresponse(res, 404, {\n      status: 404,\n      error: 'Register as Staff first, using your privately assigned Id!',\n    });\n    return;\n  }\n\n  const transaction = {};\n\n  // eslint-disable-next-line no-undef\n  transaction.transactionId = Object.keys(Transactions).length;\n  transaction.accountNumber = parseInt(req.params.accountNumber, 10);\n  transaction.amount = parseFloat(req.body.amount, 10);\n  // eslint-disable-next-line no-undef\n  transaction.cashier = parseInt(Users[req.body.email].id, 10);\n  transaction.createdOn = timeStamp();\n  transaction.transactionType = 'debit';\n  transaction.accountBalance = Accounts[transaction.accountNumber].balance\n   - parseFloat(req.body.amount);\n  transaction.oldBalance = Accounts[transaction.accountNumber].balance;\n  transaction.newBalance = transaction.accountBalance;\n\n  // update the account record accordingly with the credit action\n  Accounts[transaction.accountNumber].balance = transaction.newBalance;\n\n  // Store or record transaction\n  Transactions[transaction.transactionId] = transaction;\n\n\n  sendJSONresponse(res, 201, { status: 201, data: transaction });\n};\n\nmodule.exports.credit = function (req, res) {\n  if (!req.params.accountNumber) {\n    sendJSONresponse(res, 400, {\n      status: 400,\n      error: 'You have not specified the account number in the params!',\n    });\n    return;\n  }\n\n  if (!req.body.amount) {\n    sendJSONresponse(res, 400, {\n      status: 400,\n      error: 'You have not specified the amount!',\n    });\n    return;\n  }\n\n  if (!req.body.email) {\n    sendJSONresponse(res, 400, {\n      status: 400,\n      error: 'You have not specified your email!',\n    });\n    return;\n  }\n\n\n  if (!Accounts[req.params.accountNumber]) {\n    sendJSONresponse(res, 404, {\n      status: 404,\n      error: \"Account number doesn't exist in the first place!\",\n    });\n    return;\n  }\n\n  if (!Users[req.body.email]) {\n    sendJSONresponse(res, 404, {\n      status: 404,\n      error: 'You have not signed up!',\n    });\n    return;\n  }\n\n  if (!(hasId(staffIds, parseInt(Users[req.body.email].id, 10)))) {\n    sendJSONresponse(res, 404, {\n      status: 404,\n      error: 'Register as Staff first, using your privately assigned Id!',\n    });\n    return;\n  }\n\n  const transaction = {};\n\n  transaction.transactionId = Object.keys(Transactions).length;\n  transaction.accountNumber = parseInt(req.params.accountNumber, 10);\n  transaction.amount = parseFloat(req.body.amount, 10);\n  transaction.cashier = parseInt(Users[req.body.email].id, 10);\n  transaction.createdOn = timeStamp();\n  transaction.transactionType = 'credit';\n  transaction.accountBalance = Accounts[transaction.accountNumber].balance\n  + parseFloat(req.body.amount);\n  transaction.oldBalance = Accounts[transaction.accountNumber].balance;\n  transaction.newBalance = transaction.accountBalance;\n\n  // update the account record accordingly with the credit action\n  Accounts[transaction.accountNumber].balance = transaction.newBalance;\n\n  // Store or record transaction\n  Transactions[transaction.transactionId] = transaction;\n\n\n  sendJSONresponse(res, 201, { status: 201, data: transaction });\n};\n"]}