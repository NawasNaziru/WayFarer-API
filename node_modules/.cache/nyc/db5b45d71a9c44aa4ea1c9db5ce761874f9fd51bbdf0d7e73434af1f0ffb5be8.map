{"version":3,"sources":["authentication.js"],"names":["jwt","require","passport","bcrypt","saltRounds","sendJSONresponse","res","status","content","json","module","exports","login","req","body","email","password","error","authenticate","err","user","info","data","register","firstName","lastName","salt","genSaltSync","hash","hashSync","userId","Object","keys","Users","length","userPassword","generateJwt","expiry","Date","setDate","getDate","sign","_id","name","exp","parseInt","getTime","process","env","JWT_SECRET","hasId","arr","id","i","token","staffIds","adminIds","type","isAdmin"],"mappings":"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","file":"authentication.js","sourceRoot":"C:/Users/owner/Banka/app_api/controllers","sourcesContent":["/* eslint-disable func-names */\n/* eslint-disable no-undef */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-unused-vars */\nconst jwt = require('jsonwebtoken');\nconst passport = require('passport');\nconst bcrypt = require('bcrypt');\n\nconst saltRounds = 10;\n\n// Predefined generic function for server response in feature modules\n\nconst sendJSONresponse = function (res, status, content) {\n  res.status(status);\n  res.json(content);\n};\n\nmodule.exports.login = function (req, res) {\n  if (!req.body.email || !req.body.password) {\n    sendJSONresponse(res, 400, {\n      status: 400,\n      error: 'Requires your email and password',\n    });\n    return;\n  }\n\n\n  passport.authenticate('local', (err, user, info) => {\n    if (err) {\n      sendJSONresponse(res, 404, { status: 404, error: err });\n      return;\n    }\n\n    if (user) {\n      sendJSONresponse(res, 200, { status: 200, data: user });\n    } else {\n      sendJSONresponse(res, 401, { status: 401, error: info });\n    }\n  })(req, res);\n};\n\n// eslint-disable-next-line func-names\nmodule.exports.register = function (req, res) {\n  if (!req.body.firstName || !req.body.lastName || !req.body.email || !req.body.password) {\n    sendJSONresponse(res, 400, {\n      status: 400,\n      error: 'Requires your firstName, lastName, email and password!',\n    });\n    return;\n  }\n\n\n  // eslint-disable-next-line no-undef\n  /* if (Users[req.body.email]) {\n    sendJSONresponse(res, 200, {\n      status: 200,\n      error: 'You already have an account. Sign in instead!',\n    });\n  } */\n\n  const salt = bcrypt.genSaltSync(saltRounds);\n  const hash = bcrypt.hashSync(req.body.password, salt);\n  // eslint-disable-next-line no-undef\n  const userId = Object.keys(Users).length;\n  const userPassword = req.body.password;\n\n  const generateJwt = function () {\n    const expiry = new Date();\n    expiry.setDate(expiry.getDate() + 7);\n\n    return jwt.sign({\n      _id: userId,\n      email: req.body.email,\n      name: req.body.firstName,\n      exp: parseInt((expiry.getTime() / 1000), 10),\n    }, process.env.JWT_SECRET); // DO NOT KEEP YOUR SECRET IN THE CODE!\n  };\n\n\n  const hasId = function (arr, id) {\n    for (let i = 0; i < arr.length; i += 1) {\n      if (arr[i] === id) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const user = {};\n  const id = parseInt(req.body.id, 10);\n  user.token = generateJwt();\n  // eslint-disable-next-line no-unused-expressions\n  // eslint-disable-next-line no-undef\n  // eslint-disable-next-line no-unused-expressions\n  // eslint-disable-next-line no-undef\n  // eslint-disable-next-line no-unused-expressions\n  // eslint-disable-next-line no-undef\n  // eslint-disable-next-line no-unused-expressions\n  // eslint-disable-next-line no-undef\n  // eslint-disable-next-line no-unused-expressions\n  // eslint-disable-next-line no-undef\n  // eslint-disable-next-line no-unused-expressions\n  hasId(staffIds, id) || hasId(adminIds, id)\n    ? user.id = parseInt(req.body.id, 10) : user.id = userId;\n  user.firstName = req.body.firstName;\n  user.lastName = req.body.lastName;\n  user.email = req.body.email;\n  // eslint-disable-next-line no-unused-expressions\n  hasId(staffIds, id) || hasId(adminIds, id)\n    ? user.type = 'staff' : user.type = 'client';\n  // eslint-disable-next-line no-unused-expressions\n  user.type === 'staff' ? user.isAdmin = true : user.isAdmin = false;\n\n  // save newly registered user\n  Users[user.email] = user;\n\n\n  sendJSONresponse(res, 201, { status: 201, data: user });\n\n  // The below is for security purpose, such that password and hash can only be seen\n  // after user sign in. Thus, making it  unhelpful for a hacker.\n\n  user.password = userPassword;\n  user.hash = hash;\n  Users[user.email] = user;\n};\n"]}